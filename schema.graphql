# starship-schema 0.8

# Users
type User {
  id: ID!
  username: String!
  admin: Boolean
  profilePicture: String
  banned: Boolean
  following: [Planet]
  memberOf: [Planet]
  createdAt: String!
  usedBytes: Float!
  capWaived: Boolean
}

# Reports
type Report {
  id: ID!
  owner: User!
  createdAt: String!
  objectType: Int!
  objectId: ID!
  reportType: Int
  details: String
  user: User!
  solved: Boolean!
}

# Planets
type PlanetComponent {
  name: String
  componentId: ID!
  type: String!
}

type Planet {
  id: ID!
  name: String!
  createdAt: String!
  owner: User!
  private: Boolean!
  followerCount: Int!
  components: [PlanetComponent]!
  homeComponent: PlanetComponent
  featured: Boolean
  verified: Boolean
  partnered: Boolean
  members: [User]
  featuredDescription: String
  invites: [Invite]
  banned: [User]
  css: String
  description: String
}

# Invites
type Invite {
  id: ID!
  planet: Planet!
  owner: User!
  createdAt: String!
}

### ----------
### COMPONENTS
### ----------

interface Component {
  id: ID!
  createdAt: String!
  owner: User!
  updatedAt: String!
  planet: Planet!
}

# Page

type Page implements Component {
  id: ID!
  createdAt: String!
  owner: User!
  updatedAt: String!
  planet: Planet!
  content: String!
}

# Wiki (currently impl. as Page Group)

type Wiki implements Component {
  id: ID!
  createdAt: String!
  owner: User!
  updatedAt: String!
  planet: Planet!
  pages: [WikiPage]
}

type WikiPage {
  id: ID!
  wiki: Wiki!
  content: String
  planet: Planet!
  createdAt: String!
  name: String!
}

# Files

type FileComponent implements Component {
  id: ID!
  createdAt: String!
  owner: User!
  updatedAt: String!
  planet: Planet!
}

type FileObject {
  id: ID!
  path: [String!]
  parent: FileObject
  name: String!
  planet: Planet
  owner: User
  createdAt: String
  component: FileComponent
  type: String!
  fileType: String!
  finishedUploading: Boolean
  shareId: String!
  size: Float
}

# Forum

type Forum implements Component {
  id: ID!
  createdAt: String!
  owner: User!
  updatedAt: String!
  planet: Planet!
  stickiedPosts: [ForumPost]
  posts(limit: Int, cursor: String, sortMethod: String, tag: String): ForumPostFeed,
  tags: [String]
}

type ForumReaction {
  emoji: String!
  reactors: [String!]!
}

type ForumPost {
  id: ID!
  name: String!
  component: Forum!
  content: String!
  owner: User!
  planet: Planet!
  tags: [String]!
  reactions: [ForumReaction]!
  replyCount: Int!
  stickied: Boolean!
  locked: Boolean
  createdAt: String!
  updatedAt: String!
  replies(limit: Int, cursor: String): ForumReplyFeed
}

type ForumReply {
  id: ID!
  post: ForumPost!
  component: Forum!
  content: String!
  owner: User!
  planet: Planet!
  reactions: [ForumReaction]!
  stickied: Boolean!
  createdAt: String!
  updatedAt: String!
}

### ----------
### FEED TYPES
### ----------

type ForumPostFeed {
  cursor: String!,
  forumPosts: [ForumPost]
}

type ForumReplyFeed {
  cursor: String!,
  forumReplies: [ForumReply]
}

### -----------------
### PURE RETURN TYPES
### -----------------

type LoginPayload {
  token: String!
}

type UploadFileData {
  documentId: String!
  uploadUrl: String!
}

type UploadMarkdownImageData {
  finalUrl: String!
  uploadUrl: String!
}

### -------------
### FUNCTIONALITY
### -------------

type Query {
  # Users
  user(id: ID!): User
  adminUser(id: ID!): User
  adminUsers(startNumber: Int!, count: Int!): [User]
  currentUser: User
  # Reports
  report(id: ID!): Report
  allReports(startNumber: Int!, count: Int!): [Report]!
  reportsByUser(userId: ID!, startNumber: Int!, count: Int!): [Report]!
  searchForPlanets(searchText: String!): [Planet]
  # Planets
  featuredPlanets: [Planet]
  planet(id: ID!): Planet
  adminPlanets(startNumber: Int!, count: Int!): [Planet]
  # Invites
  invite(id: ID!): Invite
  # Pages
  page(id: ID!): Page
  # Wiki
  wiki(id: ID!): Wiki
  wikiPage(id: ID!): WikiPage
  # Forum
  forum(id: ID!): Forum
  forumPost(id: ID!): ForumPost
  forumReply(id: ID!): ForumReply
  # Files
  fileComponent(id: ID!): FileComponent
  files(componentId: ID!, parent: String!): [FileObject]
  folders(componentId: ID!, parent: String!): [FileObject]
  fileObject(id: ID!): FileObject
  fileObjectArray(ids: [ID]!): [FileObject]!
  folderReadme(id: ID!): String
  searchForFiles(componentId: ID!, parent: String!, searchText: String!): [FileObject]
  sharedFile(shareId: String!): FileObject
  # AWS
  # While many of these methods *could be* included in the
  # initial object query, because they expire it's better
  # to fetch this information as needed
  downloadFileObject(fileId: ID!): String
  downloadFolderObject(folderId: ID!): [String]
  getObjectPreview(fileId: ID!): String
}

type Mutation {
  # Users
  insertUser(email: String!, password: String!, username: String!, recaptcha: String!): User
  banUser(userId: ID!): User
  resendVerificationEmail(username: String!): Boolean
  sendResetPasswordEmail(username: String!): Boolean
  resetPassword(userId: ID!, token: String, password: String!, totpToken: String): Boolean
  activateEmail(userId: ID!, token: String!): Boolean
  loginUser(username: String!, password: String!, totpToken: String): LoginPayload!
  enableTotp: String
  # Reports
  insertReport(objectType: Int!, objectId: ID!, reportType: Int!, details: String!, userId: ID!): Report
  solveReport(reportId: ID!): Report
  # Planets
  insertPlanet(name: String!, private: Boolean!): Planet
  addComponent(planetId: ID!, name: String!, type: String!): Planet
  followPlanet(planetId: ID!): Planet
  removeComponent(planetId: ID!, componentId: ID!): Planet
  updateName(planetId: ID!, name: String!): Planet
  togglePrivate(planetId: ID!): Planet
  removeMember(planetId: ID!, userId: ID!): Planet
  renameComponent(planetId: ID!, name: String!, componentId: ID!): Planet
  applyModTools(planetId: ID!, featured: Boolean!, verified: Boolean!, partnered: Boolean!, featuredDescription: String!): Planet
  toggleBan(planetId: ID!, userId: ID!): Planet
  setCSS(planetId: ID!, css: String!): Planet
  setDescription(planetId: ID!, description: String!): Planet
  deletePlanet(planetId: ID!): Boolean
  # Invites
  insertInvite(planetId: ID!): Invite
  useInvite(inviteId: ID!): Planet
  removeInvite(inviteId: ID!): Planet
  # Pages
  updatePage(pageId: ID!, content: String!): Page
  # Wikis
  insertWikiPage(wikiId: ID!, content: String!, name: String!): WikiPage
  updateWikiPage(pageId: ID!, newContent: String!): WikiPage
  removeWikiPage(pageId: ID!): Wiki
  renameWikiPage(pageId: ID!, newName: String!): WikiPage
  # Forums
  createForumTag(forumId: ID!, tag: String!): Forum
  removeForumTag(forumId: ID!, tag: String!): Forum
  insertForumPost(forumId: ID!, name: String!, content: String!, tag: String): ForumPost
  updateForumPost(postId: ID!, content: String!): ForumPost
  deleteForumPost(postId: ID!): Boolean
  lockForumPost(postId: ID!): ForumPost
  stickyForumPost(postId: ID!): ForumPost
  forumPostReact(postId: ID!, emojiId: String!): ForumPost
  insertForumReply(postId: ID!, content: String!): ForumReply
  updateForumReply(replyId: ID!, content: String!): ForumReply
  deleteForumReply(replyId: ID!): Boolean
  forumReplyReact(replyId: ID!, emojiId: String!): ForumReply
  # Files
  createFolder(componentId: ID!, parent: String!, name: String!): FileObject
  renameObject(objectId: ID!, name: String!): FileObject
  moveObject(objectIds: [ID]!, parent: String!): [FileObject]
  copyFile(objectIds: [ID]!, parent: String!): [FileObject]
  shareFile(objectId: ID!): FileObject
  cancelUpload(objectId: ID!): FileObject
  # AWS
  uploadFileObject(folderId: String!, type: String!, name: String!, filesId: ID!): UploadFileData
  deleteFileObject(objectIds: [ID]!): Boolean
  uploadMarkdownImage(type: String!, size: Int!): UploadMarkdownImageData
  uploadProfilePicture(type: String!, size: Int!): String
  completeUpload(objectId: ID!): FileObject
}